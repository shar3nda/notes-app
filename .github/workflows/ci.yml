name: CI/CD

on: [push, pull_request]

jobs:
  ci:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    env:
      REGISTRY: ghcr.io
      IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/notes-app-api
      IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/notes-app-frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set TAG from commit hash
        id: set_tag
        run: echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Check frontend linting and formatting
        run: |
          npm run format-check
          npm run generate-api-check

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check linting and formatting
        run: |
          ruff format --diff
          ruff check --select I

      - run: docker compose down -v --remove-orphans

      - name: Start containers
        run: docker compose up -d --build --wait notes-app-db notes-app-api

      - name: Backend healthcheck
        run: |
          for i in {1..5}; do
            if curl -f http://localhost:8000/api/v1/utils/ping; then
              echo "Backend healthcheck OK!"
              exit 0
            fi
            echo "Backend not healthy, retrying in 2s..."
            sleep 2
          done
          echo "Backend healthcheck FAILED!"
          exit 1

      - name: Check if migrations are up to date
        run: alembic check

      - name: Run backend tests
        run: |
          export RUN_MODE=test
          python3 -m pytest

      - name: Stop containers
        if: always()
        run: docker compose down -v --remove-orphans

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        run: |
          docker build -t $IMAGE_BACKEND:${{ steps.set_tag.outputs.tag }} .
          docker push $IMAGE_BACKEND:${{ steps.set_tag.outputs.tag }}

      - name: Build and push frontend image
        run: |
          cd frontend
          docker build -t $IMAGE_FRONTEND:${{ steps.set_tag.outputs.tag }} .
          docker push $IMAGE_FRONTEND:${{ steps.set_tag.outputs.tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: ci
    environment: production
    permissions:
      contents: read
      id-token: write
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      TAG: ${{ needs.ci.outputs.tag }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_CONTENT }}

      - name: Apply Kubernetes manifests
        run: |
          for file in k8s/*.yaml; do
            deploy/jinja_render.py < "$file" | kubectl apply -f -
          done
